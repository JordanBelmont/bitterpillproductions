{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","className","type","value","onChange","e","target","onClick","preventDefault","id","Math","random","text","completed","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3e8fac1.chunk.js","sourcesContent":["import React from 'react';\n\n// Props\nconst Form = ({ inputText, setInputText, todos, setTodos, setStatus }) => {\n   \n   // Gets the value of the input text as it's being typed\n   const inputTextHandler = (e) => {\n      setInputText(e.target.value);\n   };\n\n   // Turns the submitted data into an object\n   const submitTodoHandler = (e) => {\n      e.preventDefault();\n      setTodos([\n         ...todos, {\n            id: Math.random() * 1000, // Can install package to generate unique id number instead of math\n            text: inputText, // text taken from state\n            completed: false // status set to uncompleted\n         }\n      ]);\n      setInputText(\"\"); // resets input bar\n   }\n\n   // \n   const statusHandler = (e) => {\n      setStatus(e.target.value);\n   }\n\n   return(\n      <form className=\"todo-form\">\n         <input \n         type=\"text\" \n         value={inputText}\n         className=\"todo-input\"\n         onChange={inputTextHandler}\n         />\n         <button \n         type=\"submit\" \n         className=\"todo-button\"\n         onClick={submitTodoHandler} \n         >\n            <i className=\"fas fa-plus\"></i>\n         </button>\n         <div className=\"select\">\n            <select \n            name=\"todos\" \n            className=\"todo-select\"\n            onChange={statusHandler}\n            >\n               <option value=\"all\">All</option>\n               <option value=\"completed\">Completed</option>\n               <option value=\"uncompleted\">Uncompleted</option>\n            </select>\n         </div>\n      </form>\n   );\n};\n\nexport default Form;","import React from 'react';\n\n// Props\nconst Todo = ({ text, todo, todos, setTodos }) => {\n\n   const deleteHandler = () => {\n      setTodos(todos.filter(el => el.id !== todo.id));\n   }\n\n   const completeHandler = () => {\n      setTodos(todos.map(item => {\n         if (item.id === todo.id) {\n            return {\n               ...item, completed: !item.completed\n            }\n         }\n         return item;\n      }))\n   };\n\n   return(\n      <div className=\"todo\">\n         <li className={`todo-item ${todo.completed ? \"completed\" : ''}`}>{text}</li>\n         <button className=\"complete-btn\" onClick={completeHandler}>\n            <i className=\"far fa-laugh\"></i>\n         </button>\n         <button className=\"delete-btn\" onClick={deleteHandler}>\n            <i className=\"far fa-dizzy\"></i>\n         </button>\n      </div>\n   );\n};\n\nexport default Todo;","import React from 'react';\nimport Todo from './Todo';\n\n// Props\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\n\n   return (\n      <div className=\"todo-container\">\n         <ul className=\"todo-list\">\n            {filteredTodos.map(todo => (\n               <Todo \n               key={todo.id}\n               text={todo.text} \n               todo={todo}\n               todos={todos} \n               setTodos={setTodos}\n               />\n            ))}\n         </ul>\n      </div>\n   );\n};\n\nexport default TodoList;","import React, { useState, useEffect } from 'react';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\nimport './App.css';\n\nfunction App() {\n\n   // States\n   const [inputText, setInputText] = useState(\"\");\n   const [todos, setTodos] = useState([]);\n   const [status, setStatus] = useState(\"all\");\n   const [filteredTodos, setFilteredTodos] = useState([]);\n\n   // Run once when app starts\n   useEffect(() => {\n      getLocalTodos();\n   }, []);\n\n   //\n   useEffect(() => {\n      filterHandler();\n      saveLocalTodos();\n   }, [todos, status]);\n\n   // \n   const filterHandler = () => {\n      switch (status) {\n         case \"completed\":\n            setFilteredTodos(todos.filter((todo) => todo.completed === true))\n            break;\n         case \"uncompleted\":\n            setFilteredTodos(todos.filter((todo) => todo.completed === false))\n            break;\n         default:\n            setFilteredTodos(todos);\n            break;\n      }\n   };\n\n   // Saves and pushes the data in state to local storage\n   const saveLocalTodos = () => {\n      localStorage.setItem('todos', JSON.stringify(todos));\n   };\n   \n   // Checks local storage\n\n   const getLocalTodos = () => {\n      if (localStorage.getItem('todos') === null) {\n         localStorage.setItem('todos', JSON.stringify([])); // if there's nothing - set an empty array\n      } else {\n         let todoLocal = JSON.parse(localStorage.getItem('todos')); \n         setTodos(todoLocal); // if there's something - push it to state\n      }\n   }\n\n   return (\n      <div className=\"App\">\n         <div className=\"todo-header\">\n            <h1 className=\"wanna\">Wanna-Do</h1>\n            <h1 className=\"to-do\">To-Do</h1>\n            <h1 className=\"list\">List</h1>\n         </div>\n         <Form \n         setStatus={setStatus}\n         todos={todos} \n         setTodos={setTodos} \n         inputText={inputText} \n         setInputText={setInputText} \n         />\n         <TodoList \n         todos={todos} \n         setTodos={setTodos} \n         filteredTodos={filteredTodos}\n         />\n      </div>\n   );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}